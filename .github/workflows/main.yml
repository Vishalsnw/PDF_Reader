# File: .github/workflows/android.yml
# Created: 2025-06-04
# Author: Vishalsnw
# Last Modified: 2025-06-04 15:26:12 UTC

name: Build Android APK

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Gradle Wrapper
        run: |
          mkdir -p gradle/wrapper
          # Create wrapper properties file
          cat > gradle/wrapper/gradle-wrapper.properties << EOL
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOL
          
          # Create gradlew script
          cat > gradlew << EOL
          #!/usr/bin/env sh
          exec java -Xmx64m -Xms64m -classpath "\$0.jar" org.gradle.wrapper.GradleWrapperMain "\$@"
          EOL
          
          # Create gradlew.bat
          cat > gradlew.bat << EOL
          @echo off
          java -Xmx64m -Xms64m -classpath "%~dp0%~n0.jar" org.gradle.wrapper.GradleWrapperMain %*
          EOL
          
          # Set permissions
          chmod +x gradlew
          
          # Verify files
          echo "Verifying wrapper files:"
          ls -la gradle/wrapper/
          ls -la gradlew*

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Configure Gradle
        run: |
          mkdir -p ~/.gradle
          cat > ~/.gradle/gradle.properties << EOL
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError
          org.gradle.parallel=true
          org.gradle.caching=true
          android.useAndroidX=true
          android.enableJetifier=true
          EOL

      - name: Generate debug keystore
        run: |
          mkdir -p .android
          keytool -genkeypair \
            -keystore .android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug, O=Android, C=US" \
            -v

      - name: Build and Extract Errors
        id: build
        continue-on-error: true
        shell: bash
        run: |
          # Environment info
          java -version
          ./gradlew --version || true
          
          # Build with error capture
          ./gradlew clean --refresh-dependencies --stacktrace > build_output.txt 2>&1 || true
          ./gradlew assembleRelease --stacktrace --info >> build_output.txt 2>&1 || true

          if [ -f build_output.txt ]; then
            grep -E "e: .*\.kt:[0-9]+:[0-9]+|error:|Unresolved reference:|cannot find symbol|Exception|Caused by|Execution failed for task|resource linking failed|resource .+ not found" \
              build_output.txt > errors_only.txt || true

            if [ ! -s errors_only.txt ]; then
              echo "No specific errors found. Showing last relevant output:" > errors_only.txt
              echo "----------------------------------------" >> errors_only.txt
              tail -n 50 build_output.txt >> errors_only.txt
            fi
          else
            echo "Build process failed to create output log!" > errors_only.txt
          fi

      - name: Upload Error Log
        uses: actions/upload-artifact@v4
        with:
          name: Build-Errors-${{ github.run_number }}
          path: errors_only.txt
          retention-days: 7

      - name: Sign APK if exists
        if: always()
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "APK_EXISTS=true" >> $GITHUB_ENV

            ZIPALIGN=$(find $ANDROID_HOME/build-tools -name zipalign | sort -r | head -n 1)
            APKSIGNER=$(find $ANDROID_HOME/build-tools -name apksigner | sort -r | head -n 1)

            echo "Using zipalign: $ZIPALIGN"
            echo "Using apksigner: $APKSIGNER"

            $ZIPALIGN -v -p 4 "$APK_PATH" aligned.apk

            $APKSIGNER sign \
              --ks .android/debug.keystore \
              --ks-pass pass:android \
              --key-pass pass:android \
              --out Pdf_Reader-release-signed.apk \
              aligned.apk

            $APKSIGNER verify --verbose Pdf_Reader-release-signed.apk
          else
            echo "APK_EXISTS=false" >> $GITHUB_ENV
            echo "No APK found at $APK_PATH"
          fi

      - name: Upload Signed Release APK
        if: env.APK_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Pdf_Reader-Release-${{ github.run_number }}
          path: Pdf_Reader-release-signed.apk
          retention-days: 30

      - name: Build Debug APK
        if: env.APK_EXISTS != 'true'
        run: |
          ./gradlew assembleDebug --stacktrace || {
            grep -E "e: .*\.kt:[0-9]+:[0-9]+|error:|Unresolved reference:|cannot find symbol|Exception|Caused by|Execution failed for task|resource linking failed|resource .+ not found" \
              debug_build.log > debug_errors.txt || true
            exit 1
          }
          echo "DEBUG_APK_EXISTS=true" >> $GITHUB_ENV

      - name: Upload Debug APK
        if: env.APK_EXISTS != 'true' && env.DEBUG_APK_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Pdf_Reader-Debug-${{ github.run_number }}
          path: app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30
