# File: .github/workflows/android.yml
# Created: 2025-06-04
# Author: Vishalsnw
# Last Modified: 2025-06-04 14:58:25 UTC

name: Build Android APK

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Gradle Wrapper
        run: |
          # Create directories
          mkdir -p gradle/wrapper
          
          # Create wrapper properties
          cat > gradle/wrapper/gradle-wrapper.properties << EOL
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
          networkTimeout=10000
          validateDistributionUrl=true
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOL
          
          # Download wrapper jar
          curl -L -o gradle/wrapper/gradle-wrapper.jar "https://raw.githubusercontent.com/gradle/gradle/v8.2.0/gradle/wrapper/gradle-wrapper.jar"
          
          # Create gradlew
          cat > gradlew << EOL
          #!/bin/sh
          exec \$JAVA_HOME/bin/java -Xmx64m -Xms64m -Dorg.gradle.appname="gradlew" -classpath "\$0" org.gradle.wrapper.GradleWrapperMain "\$@"
          EOL
          
          # Create gradlew.bat
          cat > gradlew.bat << EOL
          @rem
          @rem Copyright 2015 the original author or authors.
          @rem
          @echo off
          set DIRNAME=%~dp0
          if "%DIRNAME%" == "" set DIRNAME=.
          set APP_BASE_NAME=%~n0
          set APP_HOME=%DIRNAME%
          set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
          @rem Execute Gradle
          "%JAVA_HOME%\bin\java.exe" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
          EOL
          
          # Set executable permissions
          chmod +x gradlew
          
          # Verify files
          ls -la gradle/wrapper/
          ls -la gradlew*
          echo "Wrapper JAR SHA256:"
          sha256sum gradle/wrapper/gradle-wrapper.jar

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Configure Gradle
        run: |
          mkdir -p ~/.gradle
          cat > ~/.gradle/gradle.properties << EOL
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError
          org.gradle.parallel=true
          org.gradle.caching=true
          android.useAndroidX=true
          android.enableJetifier=true
          EOL

      - name: Generate debug keystore
        run: |
          mkdir -p .android
          keytool -genkeypair \
            -keystore .android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug, O=Android, C=US" \
            -v

      - name: Build and Extract Errors
        id: build
        continue-on-error: true
        shell: bash
        run: |
          # Verify Gradle wrapper
          ls -la gradle/wrapper/gradle-wrapper.jar
          file gradle/wrapper/gradle-wrapper.jar
          
          # Build with error capture
          ./gradlew --version
          ./gradlew clean --refresh-dependencies --stacktrace > build_output.txt 2>&1
          ./gradlew assembleRelease --stacktrace --info >> build_output.txt 2>&1 || true

          if [ -f build_output.txt ]; then
            grep -E "e: .*\.kt:[0-9]+:[0-9]+|error:|Unresolved reference:|cannot find symbol|Exception|Caused by|Execution failed for task|resource linking failed|resource .+ not found" \
              build_output.txt > errors_only.txt || true

            if [ ! -s errors_only.txt ]; then
              echo "No specific errors found. Showing last relevant output:" > errors_only.txt
              echo "----------------------------------------" >> errors_only.txt
              tail -n 50 build_output.txt >> errors_only.txt
            fi
          else
            echo "Build process failed to create output log!" > errors_only.txt
          fi

      # Rest of the steps remain the same...
